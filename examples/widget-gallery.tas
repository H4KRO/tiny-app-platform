fun Title(text) {
  Text {
    text:   text
    align:  "center"
    weight: "light"
    size:   2
  }
}

fun GalleryText() {
  Column {
    Title { text: "Text" }

    Text { text: "Simple text" }

    Text { text: "A little bigger", size: 1.1 }

    Text {
      text:   "And bold"
      size:   1.1
      weight: "bold"
    }

    Text {
      text:   "Bigger and light"
      size:   1.5
      weight: "light"
    }

    Text {
      text:   "With a different color"
      size:   1.5
      weight: "light"
      color:  "teal"
    }

    Text {
      text:   "Centered !"
      size:   1.5
      weight: "light"
      color:  "teal"
      align:  "center"
      copy:   true
    }

    Text {
      text:         "Preformated !"
      preformatted: true
    }
  }
}

fun GalleryInputText() {
  var value = ""

  Column {
    Title { text: "InputText" }

    InputText { bindTo: value }

    InputText {
      bindTo:      value
      placeholder: "With placeholder"
    }

    InputText { bindTo: value, multiline: true }

    InputText { bindTo: value, disabled: true }

    InputText {
      bindTo:      value
      placeholder: "With placeholder"
      disabled:    true
    }

    InputText {
      bindTo:    value
      multiline: true
      disabled:  true
    }

  }
}

fun GalleryCheckbox() {
  var value = false

  Column {
    Title { text: "CheckBox Switch" }
    Row {
      CheckBox { bindTo: value }
      Switch { bindTo: value }
      Text { text: "primary" }
    }
    Row {
      CheckBox { bindTo: value, disabled: true }
      Switch { bindTo: value, disabled: true }
      Text { text: "primary disabled" }
    }
    Row {
      CheckBox { bindTo: value, secondary: true }
      Switch { bindTo: value, secondary: true }
      Text { text: "secondary" }
    }
    Row {
      CheckBox {
        bindTo:    value
        disabled:  true
        secondary: true
      }
      Switch {
        bindTo:    value
        disabled:  true
        secondary: true
      }
      Text { text: "secondary disabled" }
    }
  }
}

fun GalleryButton() {
  var value = false
  var disabled = false

  Column {
    Title { text: "Button" }

    Row {
      Switch { bindTo: disabled }
      Text { text: "Disabled" }
    }

    Button { text: "Click me", disabled: disabled }

    Button {
      text:     "Confirm"
      confirm:  "Are you sure ?"
      onClick:  () => log("Confirmed !")
      disabled: disabled
    }

    Button {
      text:      "Secondary"
      secondary: true
      disabled:  disabled
    }

    Button {
      text:     "Outline"
      outline:  true
      disabled: disabled
    }

    Button {
      text:      "Outline Secondary"
      secondary: true
      outline:   true
      disabled:  disabled
    }

    Button {
      text:     "Link"
      link:     true
      disabled: disabled
      onClick:  () => log("link click")
    }

    Button {
      text:      "Link Secondary"
      secondary: true
      link:      true
      disabled:  disabled
      onClick:   () => log("link click secondary")
    }
  }
}

fun GalleryLink() {
  var value = false

  Column {
    Title { text: "Link" }
    Link { url: "https://www.example.com" }
  }
}

fun GalleryPager() {
  var currentPage = 1
  var showPrevNext = true
  var disabled = false
  var size = "2"

  Column {
    Title { text: "Pager" }

    Row {
      Switch { bindTo: showPrevNext }
      Text { text: "showPrevNext" }
    }

    Row {
      Switch { bindTo: disabled }
      Text { text: "disabled" }
    }

    Row {
      Select {
        bindTo:  size
        options: ["2", "3", "4"]
      }
      Text { text: "size" }
    }

    Pager {
      max:          100
      perPage:      10
      bindTo:       currentPage
      showPrevNext: showPrevNext
      size:         string_to_number(size)
      disabled:     disabled
    }
  }
}

fun GallerySelect() {
  var values = ["Red", "Green", {value: "#00F", label: "Blue"}]
  var value = "Red"
  var value2
  var disabled = false

  Column {
    Title { text: "Select Radio" }

    Row {
      Switch { bindTo: disabled }
      Text { text: "Disabled" }
    }

    Select {
      options:     values
      placeholder: "Color"
      bindTo:      value
      disabled:    disabled
    }
    Select {
      options:     values
      placeholder: "Color"
      bindTo:      value
      disabled:    disabled
    }
    Text { text: "Selected: " + value }
    Select {
      options:     values
      placeholder: "Color"
      bindTo:      value
    }
    Select {
      options:     values
      placeholder: "Color"
      bindTo:      value2
      disabled:    disabled
    }

    Row {
      values
         | array_map((option) => Row {
            Radio {
              option:   option
              bindTo:   value
              disabled: disabled
            }
            Text { text: default(option.label, option) }
          })
    }

    Row {
      values
         | array_map((option) => Row {
            Radio {
              option:    option
              bindTo:    value
              disabled:  disabled
              secondary: true
            }
            Text { text: default(option.label, option) }
          })
    }
  }
}

fun GalleryTable() {
  var useRemaining = false
  var noHeader = false
  var striped = true
  var noHighlight = false
  var bordered = false

  let data = [
    {name: "Toto", age: "32"}
    {name: "Tata", age: "40"}
    {name: "Titi", age: "13"}
    {name: "Tutu", age: "132", secret: true}
  ]

  Column {
    Title { text: "Table" }

    Row {
      CheckBox { bindTo: useRemaining }
      Text {
        text: "Name column must use remaining space"
      }
    }

    Row {
      CheckBox { bindTo: noHeader }
      Text { text: "No header" }
    }

    Row {
      CheckBox { bindTo: striped }
      Text { text: "Striped" }
    }

    Row {
      CheckBox { bindTo: noHighlight }
      Text { text: "No Highlight" }
    }

    Row {
      CheckBox { bindTo: bordered }
      Text { text: "Bordered" }
    }

    Table {
      _key:        (row) => row.name
      noHeader:    noHeader
      striped:     striped
      noHighlight: noHighlight
      bordered:    bordered
      columns:     [
        {
          description:  "Name"
          display:      (row) => Text { text: row.name }
          useRemaining: useRemaining
        }
        {
          description: "Age"
          display:     (row) => Text { text: row.age }
        }
      ]
      values:      data
    }

    Table {
      values:      data
      noHeader:    noHeader
      noHighlight: noHighlight
      bordered:    bordered
      striped:     striped
    }

    Table {
      noHeader:    noHeader
      noHighlight: noHighlight
      striped:     striped
      bordered:    bordered
      columns:     [
        "name"
        {
          description: "Age"
          display:     (row) => Text { text: row.age + " years old" }
        }
      ]
      values:      data
    }
  }
}

fun GalleryTabs() {
  var currentTab = "first"

  Column {
    Title { text: "Tabs" }

    Tabs {
      bindTo:  currentTab
      options: [
        {label: "First tab", value: "first"}
        {label: "Second tab", value: "second"}
      ]
    }

    switch (currentTab) {
      "first"  => Text { text: "First tab" }
      "second" => Text { text: "Second tab" }
    }
  }
}

fun GalleryLoader() {
  Column {
    Loader {}
    Loader { primary: true }
    Loader { secondary: true }
    Loader { size: "sm" }
    Loader { size: "md" }
    Loader { size: "lg" }
  }
}

fun App() {
  Column {
    padding: 0.5

    Debug { value: "Debug enabled !" }

    var currentTheme = "toy-box"
    let themes = [
      "html"
      "toy-box"
      "twbs"
      "twbs-dark"
      "nes-css"
      "dark-orange"
    ]

    Column {
      Row {
        Text { text: "Change theme: " }
        Select {
          value:    currentTheme
          onChange: (newVal) => {
            set currentTheme = newVal
            set_system_property("theme", newVal)
          }
          options:  themes
        }
      }

      Row {
        wrap: true

        Box { width: "360px", GalleryInputText {} }
        Box { width: "360px", GalleryText {} }
        Box { width: "360px", GalleryCheckbox {} }
        Box { width: "360px", GalleryButton {} }
        Box { width: "360px", GalleryLink {} }
        Box { width: "360px", GalleryPager {} }
        Box { width: "360px", GallerySelect {} }
        Box { width: "360px", GalleryTable {} }
        Box { width: "360px", GalleryTabs {} }
        Box { width: "360px", GalleryLoader {} }
      }
    }
  }
}

App {}
