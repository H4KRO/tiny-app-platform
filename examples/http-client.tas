set_system_property(key: "title", value: "HTTP Client demo")
var headers = []
var body = null
var language = "text"
var doFormat = false
var doShowHeaders = false
var method = "GET"
var url
var response
var responseBodyString

fun executeHttpRequest() {
  set response = http_request(
    method
    url
    headers
       | array_filter(header => header.selected && header.name && header.value)
       | array_map(header => [header.name, header.value])
    body
    allowErrorStatusCode: true
  )
  try {
    let contentType = string_split(response.headers["content-type"], ";")[0] | string_trim
    set language = switch (contentType) {
      "text/html"        => "html"
      "application/json" => "json"
      "text/javascript"  => "javascript"
    }
    if (language == "json") { set doFormat = true }
  }
  set responseBodyString = bytes_to_string(response.body)
}

fun buildCurlCode(method, url, headers) {
  "curl -X $method $headers '$url'"
     | string_format({
        method:  method
        url:     url
        headers: headers
           | array_map(header => string_format(
              "-H '$name: $value'"
              {name: header.name, value: header.value}
            ))
           | array_join(" ")
      })
}

fun buildTalCode(method, url, headers, body) {
  'http_request(method: "$method", url: "$url" $headers $body)'
     | string_format({
        method:  method
        url:     url
        body:    if (body != null && body != "") {
          ', body: "' + body + '"'
        } else {
          " "
        }
        headers: if (array_length(headers) > 0) {
          ", headers:" + (headers | json_stringify)
        } else {
          " "
        }
      })
}

var currentRequestTab = "headers"
var currentResponseTab = "headers"

Column {
  padding: 0.5

  Row {
    Select {
      bindTo:      method
      placeholder: "Method"
      options:     [
        "GET"
        "POST"
        "PUT"
        "PATCH"
        "DELETE"
        "LIST"
        "HEAD"
        "OPTIONS"
      ]
    }

    InputText {
      bindTo:      url
      placeholder: "URL"
      type:        "url"
      onSubmit:    executeHttpRequest
    } | flex(1)

    Button {
      text:    "Send"
      onClick: executeHttpRequest
    }
  }

  Tabs {
    bindTo:  currentRequestTab
    options: [
      {label: "Headers", value: "headers"}
      {label: "Body", value: "body"}
      {label: "Code", value: "code"}
    ]
  }

  switch (currentRequestTab) {
    "headers" => Column {
        Row {
          Button {
            onClick: () => set headers = array_append(
              (headers)
              {
                selected: true
                name:     "user-agent"
                value:    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0"
              }
            )
            text:    "Add user agent header"
            outline: true
          } | flex(1)

          Button {
            onClick: () => set headers = array_append(
              (headers)
              {
                selected: true
                name:     "content-type"
                value:    "application/json"
              }
            )
            text:    "Add content JSON"
            outline: true
          } | flex(1)

          Button {
            text:    "New header"
            onClick: {
              () => set headers = array_append(headers, {selected: true, name: "", value: ""})
            }
          } | flex(1)
        }

        if (array_length(headers) > 0) {
          Column {
            array_map(
              headers
              (header, index) => [
                Row {
                  CheckBox { bindTo: header.selected }

                  InputText {
                    placeholder: "Header name"
                    bindTo:      header.name
                  }

                  InputText {
                    placeholder: "Header value"
                    bindTo:      header.value
                  } | flex(2)


                  Button {
                    text:    "🗑️"
                    confirm: if (header.name || header.value) {
                      "Remove header ?"
                    } else {
                      null
                    }
                    outline: true
                    onClick: () => set headers = array_remove(headers, index)
                  }

                }
              ]
            )
          }
        }
      }
    "body"    => InputText {
        bindTo:      body
        placeholder: "body"
        multiline:   true
      }
    "code"    => Column {
        {
          let validHeaders = headers | array_filter(header => header.selected && header.name && header.value)

          if (method != null && url != null) {
            Text {
              copy: true
              text: buildCurlCode(method, url, validHeaders)
            }

            Text {
              copy: true
              text: buildTalCode(
                method
                url
                validHeaders
                body
              )
            }
          }
        }

      }
  }

  if (response != null) {
    Row {
      Text {
        text: string_format("Status: $status", {status: response.status})
      }
    }

    Tabs {
      bindTo:  currentResponseTab
      options: [
        {value: "headers", label: "Headers"}
        {value: "body", label: "Body"}
      ]
    }

    switch (currentResponseTab) {
      "headers" => Column {
          Table {
            _key:    row => row.key
            columns: [
              {
                description: "Name"
                display:     row => Text { text: row.key, copy: true }
              }

              {
                description: "Value"
                display:     row => Text { text: row.value, copy: true }
              }
            ]
            values:  response.headers
               | object_entries
               | array_map(header => {key: header[0], value: header[1]})
          }
        }
      "body"    => Column {
          Row {
            Text { text: "Language" }

            Select {
              options: [
                "text"
                "json"
                "html"
                "xml"
                "javascript"
                "css"
              ]
              bindTo:  language
            }

            Text { text: "Format" }
            Switch { bindTo: doFormat }
          }

          if (language == "json" && doFormat) {
            Debug {
              value: responseBodyString | json_parse
              force: true
            }
          } else {
            Snippet {
              text:        responseBodyString
              language:    language
              format:      doFormat
              noMaxHeight: true
            } | scroller
          }
        } | scroller
    }
  }
} | scroller
